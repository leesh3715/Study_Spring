AOP(Aspect Oriented Programming - 관점 지향 프로그래밍)
기존의 OOP(객체 지향 프로그래밍)를 보완한 개념(핵심 사항과 공통 관심사항을 분리하여 구현)

- AOP는 핵심 관심사항과 공통관심사항을 별도로 코드로 구현해서 최종적으로 이들을 완성하는 것
  DI가 애플리케이션 객체 간 결합도를 낮추는데 있었다면, AOP는 횡단 관심사(공통관심사항)와 이에
  영향을 받는 객체 간 결합도를 낮추는데 있다.
  
- AOP의 장점
 - 전체 코드에 흩어져 있는 공통관심사항이 하나의 장소의 집중(응집)이 된다는 점.
 - 서비스 모듈이 자신의 주요 관심사항(핵심사항)에 대한 코드만 포함하고, 그 와의 공통관심사항은
       모두 빠지므로 코드가 깔끔해 진다는 점.
 
 - AOP 주요 용어 - 중요
 - 핵심관심사항: 비지니스 로직(주된 업무)
 - 공통관심사항: 부가적인 업무(보조 업무) - 횡단관심사항
	 		공통관심사항은 누군가에게 맡겨 버리는 것이 더 좋다.
 - code : 핵심관심사항을 구현한 내용.
 - Advice: 공통관심사항을 구현한 코드. - 에스팩트(공통관심사항)가 무엇을 언제 할 지를 정의
 			공통관심사항 내용을 정의하고, 언제 그 작업을 수행 할 지를 정의하는 것이 Advice임.
 - joinPoint : Code와 Advice를 연결 해 주는 설정 정보, Advice가 적용이 가능한 지점(메서드 호출)
 - pointCut : joinPoint의 실제 Advice가 적용되는  joinPoint, 실제 Advice를 어디서 할지를 정의하는 것을 말함.
 - weaving: Code + Advice + pointCut 등을 조합해서 어플리케이션을 만들어 가는 과정
 - Aspect는 Advice와 pointCut을 함께 지칭하는 단어임. 무엇을 언제 어디서  할지, 즉 Aspect에 필요한 모든 정보가 정의가 됨.
 
 - 스프링은 자체적인 프록시 기반의 AOP를 지원함. 필드 값 변경과  같은 joinPoint는 사용할 수 없음.
 	메서드 호출 joinPoint만 지원이 됨.
 	스프링 AOP는 완전한 AOP를 지원하는 것이 목적이 아니라, 엔터프라이즈 애플리케이션을 구현하는데 필요한 정도의 기능 제공을 목적으로 하고 있다.
 	
 - 스프링에서 AOP 구현 방법은 Proxy를 이용한다
 	Client --------> Proxy --------> Target
 	(호출부)			 (대리인)			 (핵심기능)
 - AOP 구현
 	- 설정파일을 이용하는 방법(XML 구현)
 	- 애노테이션을 이용하는 방법(@AspectJ 에노테이션 기반의 AOP구현) 	
 - AOP를 스프링에서 구현하기 위해서는 라이브러리 파일(aspectJweaver)이 필요함.
 	pom.xml 파일에 라이브러리 파일을 등록시켜주어야 함.
 	
 - XML 기반의 AOP 구현 과정
 	- 의존 설정(pom.xml)
 	- 공통 기능 클래스 제작 - Advice 역할 클래스 작성
 	- XML 파일에 Aspect
 	
 - Advice 실행 종류
 	<aop:before>: 핵심 기능이 실행되기 전에 Advice를 실행 한다.
 	<aop:after-returning>: 정상적으로 핵심기능이 실행된 후에 Advice를 실행한다.
 	<aop:after-throwing>: 핵심기능 실행 중에 Exception이 발생 시 Advice를 실행 한다.
 	<aop:after>: 핵심 기능 실행 후에 Advice를 실행 한다. (Exception이 발생 하더라도)
 	<aop:around>: 핵심 기능 실행 전/후 및 Exception 발생 시 Advice를 실행한다.
	 	